// <auto-generated />
using Arkitektum.Orden.Data;
using Arkitektum.Orden.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Arkitektum.Orden.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Arkitektum.Orden.Models.AccessRightComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AccessRightCommentField")
                        .HasColumnName("access_right_comment_field");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.HasKey("Id")
                        .HasName("pk_access_right_comment");

                    b.HasIndex("DatasetId")
                        .HasName("ix_access_right_comment_dataset_id");

                    b.ToTable("access_right_comment");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<decimal>("AnnualFee")
                        .HasColumnName("annual_fee");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified");

                    b.Property<string>("HostingLocation")
                        .HasColumnName("hosting_location");

                    b.Property<string>("HostingVendor")
                        .HasColumnName("hosting_vendor");

                    b.Property<decimal>("InitialCost")
                        .HasColumnName("initial_cost");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnName("number_of_users");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("SystemOwnerId")
                        .HasColumnName("system_owner_id");

                    b.Property<string>("UserCreated")
                        .HasColumnName("user_created");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified");

                    b.Property<string>("Vendor")
                        .HasColumnName("vendor");

                    b.Property<string>("Version")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_application");

                    b.HasIndex("OrganizationId")
                        .HasName("ix_application_organization_id");

                    b.HasIndex("SystemOwnerId")
                        .HasName("ix_application_system_owner_id");

                    b.ToTable("application");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationDataset", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.HasKey("ApplicationId", "DatasetId")
                        .HasName("pk_application_dataset");

                    b.HasIndex("DatasetId")
                        .HasName("ix_application_dataset_dataset_id");

                    b.ToTable("application_dataset");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationNationalComponent", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("NationalComponentId")
                        .HasColumnName("national_component_id");

                    b.HasKey("ApplicationId", "NationalComponentId")
                        .HasName("pk_application_national_component");

                    b.HasIndex("NationalComponentId")
                        .HasName("ix_application_national_component_national_component_id");

                    b.ToTable("application_national_component");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationStandard", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("StandardId")
                        .HasColumnName("standard_id");

                    b.HasKey("ApplicationId", "StandardId")
                        .HasName("pk_application_standard");

                    b.HasIndex("StandardId")
                        .HasName("ix_application_standard_standard_id");

                    b.ToTable("application_standard");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSupportedIntegration", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int>("SupportedIntegrationId")
                        .HasColumnName("supported_integration_id");

                    b.HasKey("ApplicationId", "SupportedIntegrationId")
                        .HasName("pk_application_supported_integration");

                    b.HasIndex("SupportedIntegrationId")
                        .HasName("ix_application_supported_integration_supported_integration_id");

                    b.ToTable("application_supported_integration");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("ApplicationId")
                        .HasName("ix_asp_net_users_application_id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("user_name_index");

                    b.ToTable("asp_net_users");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessRight")
                        .HasColumnName("access_right");

                    b.Property<string>("DataLocation")
                        .HasColumnName("data_location");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified");

                    b.Property<int?>("DcatCatalogId")
                        .HasColumnName("dcat_catalog_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("HasMasterData")
                        .HasColumnName("has_master_data");

                    b.Property<bool>("HasPersonalData")
                        .HasColumnName("has_personal_data");

                    b.Property<bool>("HasSensitivePersonalData")
                        .HasColumnName("has_sensitive_personal_data");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<DateTime?>("PublishedToSharedDataCatalog")
                        .HasColumnName("published_to_shared_data_catalog");

                    b.Property<string>("Purpose")
                        .HasColumnName("purpose");

                    b.Property<string>("UserCreated")
                        .HasColumnName("user_created");

                    b.Property<string>("UserModified")
                        .HasColumnName("user_modified");

                    b.HasKey("Id")
                        .HasName("pk_dataset");

                    b.HasIndex("DcatCatalogId")
                        .HasName("ix_dataset_dcat_catalog_id");

                    b.ToTable("dataset");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.DcatCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Homepage")
                        .HasColumnName("homepage");

                    b.Property<DateTime?>("Issued")
                        .HasColumnName("issued");

                    b.Property<string>("Language")
                        .HasColumnName("language");

                    b.Property<string>("License")
                        .HasColumnName("license");

                    b.Property<DateTime?>("Modified")
                        .HasColumnName("modified");

                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("ThemesTaxonomy")
                        .HasColumnName("themes_taxonomy");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_dcat_catalog");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasName("ix_dcat_catalog_organization_id");

                    b.ToTable("dcat_catalog");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.DcatConcept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_dcat_concept");

                    b.HasIndex("DatasetId")
                        .HasName("ix_dcat_concept_dataset_id");

                    b.ToTable("dcat_concept");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Distribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("LicenseId")
                        .HasColumnName("license_id");

                    b.HasKey("Id")
                        .HasName("pk_distribution");

                    b.HasIndex("DatasetId")
                        .HasName("ix_distribution_dataset_id");

                    b.HasIndex("LicenseId")
                        .HasName("ix_distribution_license_id");

                    b.ToTable("distribution");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<bool>("IsPersonalData")
                        .HasColumnName("is_personal_data");

                    b.Property<bool>("IsSensitivePersonalData")
                        .HasColumnName("is_sensitive_personal_data");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_field");

                    b.HasIndex("DatasetId")
                        .HasName("ix_field_dataset_id");

                    b.ToTable("field");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DistributionId")
                        .HasColumnName("distribution_id");

                    b.Property<string>("FormatField")
                        .HasColumnName("format_field");

                    b.HasKey("Id")
                        .HasName("pk_format");

                    b.HasIndex("DistributionId")
                        .HasName("ix_format_distribution_id");

                    b.ToTable("format");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Identifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<string>("IdentifierField")
                        .HasColumnName("identifier_field");

                    b.HasKey("Id")
                        .HasName("pk_identifier");

                    b.HasIndex("DatasetId")
                        .HasName("ix_identifier_dataset_id");

                    b.ToTable("identifier");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_integration");

                    b.ToTable("integration");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<string>("KeywordField")
                        .HasColumnName("keyword_field");

                    b.HasKey("Id")
                        .HasName("pk_keyword");

                    b.HasIndex("DatasetId")
                        .HasName("ix_keyword_dataset_id");

                    b.ToTable("keyword");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.LicenseDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("LicenseType")
                        .HasColumnName("license_type");

                    b.HasKey("Id")
                        .HasName("pk_license_document");

                    b.ToTable("license_document");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.NationalComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_national_component");

                    b.ToTable("national_component");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnName("organization_number");

                    b.HasKey("Id")
                        .HasName("pk_organization");

                    b.ToTable("organization");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationAdministrators", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("application_user_id");

                    b.HasKey("OrganizationId", "ApplicationUserId")
                        .HasName("pk_organization_administrators");

                    b.HasIndex("ApplicationUserId")
                        .HasName("ix_organization_administrators_application_user_id");

                    b.ToTable("organization_administrators");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationApplicationUser", b =>
                {
                    b.Property<int>("OrganizationId")
                        .HasColumnName("organization_id");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Role")
                        .HasColumnName("role");

                    b.HasKey("OrganizationId", "ApplicationUserId", "Role")
                        .HasName("pk_organization_application_user");

                    b.HasIndex("ApplicationUserId")
                        .HasName("ix_organization_application_user_application_user_id");

                    b.ToTable("organization_application_user");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ResourceLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("ApplicationId")
                        .HasColumnName("application_id");

                    b.Property<int?>("DatasetId")
                        .HasColumnName("dataset_id");

                    b.Property<int?>("DatasetId1")
                        .HasColumnName("dataset_id1");

                    b.Property<int?>("DatasetId2")
                        .HasColumnName("dataset_id2");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<int?>("DistributionId")
                        .HasColumnName("distribution_id");

                    b.Property<int?>("SectorId")
                        .HasColumnName("sector_id");

                    b.Property<string>("Url")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_resource_link");

                    b.HasIndex("ApplicationId")
                        .HasName("ix_resource_link_application_id");

                    b.HasIndex("DatasetId")
                        .HasName("ix_resource_link_dataset_id");

                    b.HasIndex("DatasetId1")
                        .HasName("ix_resource_link_dataset_id1");

                    b.HasIndex("DatasetId2")
                        .HasName("ix_resource_link_dataset_id2");

                    b.HasIndex("DistributionId")
                        .HasName("ix_resource_link_distribution_id");

                    b.HasIndex("SectorId")
                        .HasName("ix_resource_link_sector_id");

                    b.ToTable("resource_link");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_sector");

                    b.ToTable("sector");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SectorApplication", b =>
                {
                    b.Property<int>("SectorId")
                        .HasColumnName("sector_id");

                    b.Property<int>("ApplicationId")
                        .HasColumnName("application_id");

                    b.HasKey("SectorId", "ApplicationId")
                        .HasName("pk_sector_application");

                    b.HasIndex("ApplicationId")
                        .HasName("ix_sector_application_application_id");

                    b.ToTable("sector_application");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_standard");

                    b.ToTable("standard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("role_name_index");

                    b.ToTable("asp_net_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_role_claims_role_id");

                    b.ToTable("asp_net_role_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_claims_user_id");

                    b.ToTable("asp_net_user_claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_asp_net_user_logins_user_id");

                    b.ToTable("asp_net_user_logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_asp_net_user_roles_role_id");

                    b.ToTable("asp_net_user_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.AccessRightComment", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("AccessRightComments")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_access_right_comment_dataset_dataset_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Application", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("Applications")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_application_organization_organization_id");

                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser", "SystemOwner")
                        .WithMany()
                        .HasForeignKey("SystemOwnerId")
                        .HasConstraintName("fk_application_asp_net_users_system_owner_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationDataset", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationDatasets")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_application_dataset_application_application_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Dataset", "Dataset")
                        .WithMany("ApplicationDatasets")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_application_dataset_dataset_dataset_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationNationalComponent", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationNationalComponent")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_application_national_component_application_application_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.NationalComponent", "NationalComponent")
                        .WithMany("ApplicationNationalComponents")
                        .HasForeignKey("NationalComponentId")
                        .HasConstraintName("fk_application_national_component_national_component_national_component_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationStandard", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationStandards")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_application_standard_application_application_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Standard", "Standard")
                        .WithMany("ApplicationStandards")
                        .HasForeignKey("StandardId")
                        .HasConstraintName("fk_application_standard_standard_standard_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSupportedIntegration", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationSupportedIntegrations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_application_supported_integration_application_application_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Integration", "SupportedIntegration")
                        .WithMany("ApplicationSupportedIntegrations")
                        .HasForeignKey("SupportedIntegrationId")
                        .HasConstraintName("fk_application_supported_integration_integration_supported_integration_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationUser", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application")
                        .WithMany("SuperUsers")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_asp_net_users_application_application_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Dataset", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.DcatCatalog", "DcatCatalog")
                        .WithMany("Datasets")
                        .HasForeignKey("DcatCatalogId")
                        .HasConstraintName("fk_dataset_dcat_catalog_dcat_catalog_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.DcatCatalog", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithOne("DcatCatalog")
                        .HasForeignKey("Arkitektum.Orden.Models.DcatCatalog", "OrganizationId")
                        .HasConstraintName("fk_dcat_catalog_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.DcatConcept", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("Concepts")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_dcat_concept_dataset_dataset_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Distribution", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset", "Dataset")
                        .WithMany("Distributions")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_distribution_dataset_dataset_id");

                    b.HasOne("Arkitektum.Orden.Models.LicenseDocument", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .HasConstraintName("fk_distribution_license_document_license_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Field", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset", "Dataset")
                        .WithMany("Fields")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_field_dataset_dataset_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Format", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Distribution")
                        .WithMany("Formats")
                        .HasForeignKey("DistributionId")
                        .HasConstraintName("fk_format_distribution_distribution_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Identifier", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("Identifiers")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_identifier_dataset_dataset_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Keyword", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("Keywords")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_keyword_dataset_dataset_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationAdministrators", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("OrganizationAdministrators")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_organization_administrators_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("OrganizationAdministrators")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_organization_administrators_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationApplicationUser", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Organizations")
                        .HasForeignKey("ApplicationUserId")
                        .HasConstraintName("fk_organization_application_user_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_organization_application_user_organization_organization_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ResourceLink", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application")
                        .WithMany("ResourceLinks")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_resource_link_application_application_id");

                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("ContactPoints")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_resource_link_dataset_dataset_id");

                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("LawReferences")
                        .HasForeignKey("DatasetId1")
                        .HasConstraintName("fk_resource_link_dataset_dataset_id1");

                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("ResourceLinks")
                        .HasForeignKey("DatasetId2")
                        .HasConstraintName("fk_resource_link_dataset_dataset_id2");

                    b.HasOne("Arkitektum.Orden.Models.Distribution")
                        .WithMany("Resources")
                        .HasForeignKey("DistributionId")
                        .HasConstraintName("fk_resource_link_distribution_distribution_id");

                    b.HasOne("Arkitektum.Orden.Models.Sector")
                        .WithMany("LawReferences")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("fk_resource_link_sector_sector_id");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SectorApplication", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("SectorApplications")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fk_sector_application_application_application_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Sector", "Sector")
                        .WithMany("SectorApplications")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("fk_sector_application_sector_sector_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
