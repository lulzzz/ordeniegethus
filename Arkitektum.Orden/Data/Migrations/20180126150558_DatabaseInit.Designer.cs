// <auto-generated />
using Arkitektum.Orden.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Arkitektum.Orden.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180126150558_DatabaseInit")]
    partial class DatabaseInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Arkitektum.Orden.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AnnnualFee");

                    b.Property<string>("HostingLocation");

                    b.Property<int?>("HostingVendorId");

                    b.Property<decimal>("InitialCost");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfUsers");

                    b.Property<int?>("OrganizationId");

                    b.Property<string>("SystemOwnerId");

                    b.Property<int?>("VendorId");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("HostingVendorId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SystemOwnerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationDataset", b =>
                {
                    b.Property<int>("ApplicationId");

                    b.Property<int>("DatasetId");

                    b.HasKey("ApplicationId", "DatasetId");

                    b.HasIndex("DatasetId");

                    b.ToTable("ApplicationDataset");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSharedService", b =>
                {
                    b.Property<int>("ApplicationId");

                    b.Property<int>("SharedServiceId");

                    b.HasKey("ApplicationId", "SharedServiceId");

                    b.HasIndex("SharedServiceId");

                    b.ToTable("ApplicationSharedService");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationStandard", b =>
                {
                    b.Property<int>("ApplicationId");

                    b.Property<int>("StandardId");

                    b.HasKey("ApplicationId", "StandardId");

                    b.HasIndex("StandardId");

                    b.ToTable("ApplicationStandard");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSupportedIntegration", b =>
                {
                    b.Property<int>("ApplicationId");

                    b.Property<int>("SupportedIntegrationId");

                    b.HasKey("ApplicationId", "SupportedIntegrationId");

                    b.HasIndex("SupportedIntegrationId");

                    b.ToTable("ApplicationSupportedIntegration");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("ApplicationId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataLocation");

                    b.Property<string>("Description");

                    b.Property<bool>("HasMasterData");

                    b.Property<bool>("HasPersonalData");

                    b.Property<bool>("HasSensitivePersonalData");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("PublishedToSharedDataCatalog");

                    b.Property<string>("Purpose");

                    b.HasKey("Id");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DatasetId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPersonalData");

                    b.Property<bool>("IsSensitivePersonalData");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Integration");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.LawReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DatasetId");

                    b.Property<string>("Description");

                    b.Property<int?>("SectorId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.HasIndex("SectorId");

                    b.ToTable("LawReference");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("OrganizationNumber");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationApplicationUser", b =>
                {
                    b.Property<int>("OrganizationId");

                    b.Property<string>("ApplicationUserId");

                    b.HasKey("OrganizationId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("OrganizationApplicationUser");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ResourceLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicationId");

                    b.Property<int?>("DatasetId");

                    b.Property<string>("Description");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("DatasetId");

                    b.ToTable("ResourceLink");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("OrganizationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SectorApplication", b =>
                {
                    b.Property<int>("SectorId");

                    b.Property<int>("ApplicationId");

                    b.HasKey("SectorId", "ApplicationId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SectorApplication");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SharedService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("SharedService");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Standard");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Application", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Vendor", "HostingVendor")
                        .WithMany()
                        .HasForeignKey("HostingVendorId");

                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("Applications")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser", "SystemOwner")
                        .WithMany()
                        .HasForeignKey("SystemOwnerId");

                    b.HasOne("Arkitektum.Orden.Models.Vendor", "Vendor")
                        .WithMany("Applications")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationDataset", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationDatasets")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Dataset", "Dataset")
                        .WithMany("ApplicationDatasets")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSharedService", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationSharedServices")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.SharedService", "SharedService")
                        .WithMany("ApplicationSharedServices")
                        .HasForeignKey("SharedServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationStandard", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationStandards")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Standard", "Standard")
                        .WithMany("ApplicationStandards")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationSupportedIntegration", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("ApplicationSupportedIntegrations")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Integration", "SupportedIntegration")
                        .WithMany("ApplicationSupportedIntegrations")
                        .HasForeignKey("SupportedIntegrationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ApplicationUser", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application")
                        .WithMany("SuperUsers")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Arkitektum.Orden.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Field", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("Fields")
                        .HasForeignKey("DatasetId");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.LawReference", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("LawReferences")
                        .HasForeignKey("DatasetId");

                    b.HasOne("Arkitektum.Orden.Models.Sector")
                        .WithMany("LawReferences")
                        .HasForeignKey("SectorId");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.OrganizationApplicationUser", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Organizations")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.ResourceLink", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application")
                        .WithMany("ResourceLinks")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Arkitektum.Orden.Models.Dataset")
                        .WithMany("ResourceLinks")
                        .HasForeignKey("DatasetId");
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.Sector", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Organization", "Organization")
                        .WithMany("Sectors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SectorApplication", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application", "Application")
                        .WithMany("SectorApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.Sector", "Sector")
                        .WithMany("SectorApplications")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Arkitektum.Orden.Models.SharedService", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.Application")
                        .WithMany("SuppportedSharedServices")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Arkitektum.Orden.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
